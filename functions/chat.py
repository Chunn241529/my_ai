import threading
from bs4 import BeautifulSoup
from duckduckgo_search import DDGS
import pygame
from rich.console import Console
from rich.markdown import Markdown
from rich.live import Live
from typing import List

# Gi·∫£ ƒë·ªãnh c√°c module n√†y ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
from functions.subfuncs.commands import *
from functions.subfuncs.file import *
from functions.subfuncs.generate import *
from functions.subfuncs.tts import run_viettts_synthesis  # Import TTS function

console = Console()

# Kh·ªüi t·∫°o pygame mixer
pygame.mixer.init()

class Chat:
    def __init__(self, initial_query: str):
        self.initial_query = initial_query
        self.history_analys: List[str] = []
        self.refresh_second = 10
        self.vertical_overflow = "ellipsis"
        self.only_url = self.extract_url_from_input(initial_query) or ""
        os.environ["JAX_PLATFORM_NAME"] = "cpu"
    def extract_url_from_input(self, input_text: str) -> str:
        """Tr√≠ch xu·∫•t URL ƒë·∫ßu ti√™n t·ª´ chu·ªói ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng."""
        URL_PATTERN = r"https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+[^\s]*"
        match = re.search(URL_PATTERN, input_text)
        return match.group(0) if match else ""

    def fallback_search(self, query: str) -> str:
        with DDGS() as ddgs:
            results = ddgs.text(query, max_results=2)
            return (
                "\n".join([r["body"] for r in results])
                if results
                else "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªï sung."
            )

    def extract_content(self, url: str = None, snippet: str = "") -> str:
        if not url:
            url = self.only_url
        if not url:
            return "Kh√¥ng c√≥ URL ƒë·ªÉ ph√¢n t√≠ch. T√¥i s·∫Ω d·ª±a v√†o th√¥ng tin kh√°c n·∫øu c√≥."
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            tags_to_extract = ["p", "h1", "h2", "h3", "a", "span", "table", "textarea"]
            content_parts = [
                tag.get_text(strip=True)
                for tag in soup.find_all(tags_to_extract)
                if tag.get_text(strip=True)
            ]
            return f"Snippet: {snippet}\n" + "\n".join(content_parts)
        except requests.RequestException as e:
            return (
                f"Kh√¥ng th·ªÉ truy c·∫≠p {url}: {str(e)}. T√¥i s·∫Ω th·ª≠ t√¨m th√¥ng tin b·ªï sung."
            )
        
    def play_speech(self, file_path):
        """Ph√°t file √¢m thanh b·∫±ng pygame mixer."""
        try:
            pygame.mixer.music.load(file_path)
            pygame.mixer.music.play()
            while pygame.mixer.music.get_busy():  # Ch·ªù cho ƒë·∫øn khi ph√°t xong
                time.sleep(0.1)
        except Exception as e:
            console.print(f"[bold red]L·ªói khi ph√°t √¢m thanh: {e}[/bold red]")   

    def chat(self) -> str:
        """T·ªïng h·ª£p c√°c c√¢u tr·∫£ l·ªùi ƒë√£ thu th·∫≠p."""
        content = self.extract_content(self.only_url) or ""

        if any(
            keyword in content.lower()
            for keyword in [
                "ƒëƒÉng nh·∫≠p",
                "sign in",
                "kh√¥ng th·ªÉ truy c·∫≠p",
                "Forbidden",
                "404 Not Found",
                "Connection Refused",
            ]
        ):
            fallback = self.fallback_search(self.only_url)
            content += f"\nTh√¥ng tin b·ªï sung t·ª´ t√¨m ki·∫øm: {fallback}"

        with Live(
            Markdown("Ch·ªù x√≠u...üñêÔ∏è"),
            refresh_per_second=self.refresh_second,
            console=console,
            vertical_overflow=self.vertical_overflow,
        ) as live:
            summary_stream = chat(
                query=self.initial_query, url=self.only_url, content=content
            )

            final_answer = ""
            for part in summary_stream:
                if part is not None:
                    final_answer += part
                    live.update(Markdown(f"\n{final_answer}"))

        self.history_analys.append(final_answer)
        return final_answer

    def run_chat(self) -> str:
        final_answer = self.chat()
        self.history_analys.clear()

        # T√≠ch h·ª£p TTS ngay sau khi stream ho√†n t·∫•t
        output_file = "assets/infore/clip.wav"
        word_count = len(final_answer.split())
        if word_count <= 100:  # Gi·ªõi h·∫°n s·ªë t·ª´ n·∫øu c·∫ßn
            success = run_viettts_synthesis(text=final_answer, output=output_file)
            if success:
                # Ph√°t √¢m thanh trong m·ªôt lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n giao di·ªán
                threading.Thread(
                    target=self.play_speech, args=(output_file,), daemon=True
                ).start()

        return f"\n{final_answer}"
