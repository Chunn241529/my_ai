
from duckduckgo_search import DDGS
from bs4 import BeautifulSoup

import requests
from rich.markdown import Markdown



# import scripts
from commands import *
from file import *
from image import *
from generate import *

# Kh·ªüi t·∫°o console t·ª´ Rich
console = Console()
history_analys = []


import random                                                                  
                                                                            
def random_number():                                                           
    """                                                                          
    H√†m n√†y t·∫°o ra m·ªôt s·ªë ng·∫´u nhi√™n t·ª´ 10 ƒë·∫øn 25.                               
    """                                                                          
    return random.randint(10, 25)     

max_results = random_number() # number of ressults 

# C√°c h√†m t·ª´ search.py
def search_web(query, max_results=max_results):
    results = []
    with DDGS() as ddgs:
        for r in ddgs.text(query, max_results=max_results):
            results.append({
                'title': r['title'],
                'url': r['href'],
                'snippet': r['body']
            })
    return results

def extract_content(url, snippet=""):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # Ki·ªÉm tra l·ªói HTTP
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Danh s√°ch c√°c th·∫ª mu·ªën tr√≠ch xu·∫•t n·ªôi dung
        tags_to_extract = ['p', 'h1', 'h2', 'li', 'a']
        content_parts = []
        
        # Duy·ªát qua t·ª´ng lo·∫°i th·∫ª
        for tag in soup.find_all(tags_to_extract):
            if tag.name == 'a' and tag.get('href'):  # ƒê·∫∑c bi·ªát x·ª≠ l√Ω th·∫ª <a>
                text = tag.get_text(strip=True)
                href = tag['href']
                content_parts.append(f"{text} (link: {href})")
            else:  # C√°c th·∫ª kh√°c ch·ªâ l·∫•y text
                text = tag.get_text(strip=True)
                if text:  # Ch·ªâ th√™m n·∫øu c√≥ n·ªôi dung
                    content_parts.append(text)
        
        # Gh√©p t·∫•t c·∫£ n·ªôi dung th√†nh m·ªôt chu·ªói, th√™m snippet n·∫øu c√≥
        content = f"Snippet: {snippet}\n" + " ".join(content_parts)
        return content[:5000]  # Gi·ªõi h·∫°n 5000 k√Ω t·ª±
    
    except requests.RequestException as e:
        return f"Error fetching {url}: {str(e)}"


def extract_queries(text, history_queries=None):
    if history_queries is None:
        history_queries = set()
    # N·∫øu text kh√¥ng h·ªó tr·ª£ split(), nghƒ©a l√† n√≥ kh√¥ng ph·∫£i l√† chu·ªói, ta s·∫Ω ti√™u th·ª• n√≥
    try:
        lines = text.split('\n')
    except AttributeError:
        # N·∫øu text l√† generator, chuy·ªÉn n√≥ th√†nh chu·ªói
        text = ''.join(text)
        lines = text.split('\n')

    queries = set()
    in_query_section = False

    for i, line in enumerate(lines):
        line_clean = line.strip().lower()
        if line_clean.startswith('ƒë·ªÅ xu·∫•t truy v·∫•n:') or line_clean.startswith('**ƒë·ªÅ xu·∫•t truy v·∫•n:**'):
            in_query_section = True
        elif in_query_section and (not line.strip() or not line.strip().startswith('*')):
            in_query_section = False

        if in_query_section:
            # N·∫øu d√≤ng hi·ªán t·∫°i kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng '*' nh∆∞ng c√≥ ch·ª©a 'ƒê·ªÅ xu·∫•t truy v·∫•n:'
            if i + 1 < len(lines) and not lines[i].strip().startswith('*') and lines[i].strip().startswith('ƒê·ªÅ xu·∫•t truy v·∫•n:'):
                next_line = lines[i + 1].strip()
                if next_line and not next_line.startswith('Truy v·∫•n t·ª´') and not next_line.startswith('ƒê√°nh gi√°:'):
                    clean_query = next_line.strip('"').strip('*').strip()
                    if clean_query and clean_query not in history_queries:
                        queries.add(clean_query)
            # N·∫øu d√≤ng hi·ªán t·∫°i b·∫Øt ƒë·∫ßu b·∫±ng '*' th√¨ tr√≠ch xu·∫•t ph·∫ßn sau d·∫•u *
            elif line.strip().startswith('*'):
                clean_query = line.strip()[1:].strip().strip('"').strip()
                if clean_query and clean_query not in history_queries:
                    queries.add(clean_query)

    return list(queries)[:1]


def deepsearch(initial_query, max_iterations=3):
    current_queries = []
    accumulated_context = ""
    all_answers = {}
    all_data = ""
    history_queries = set([initial_query])
    history_keywords = set()

    ###

    iteration = 0
    processed_urls = set()  # Danh s√°ch ƒë·ªÉ l∆∞u c√°c URL ƒë√£ ph√¢n t√≠ch

    ### ph√¢n t√≠ch c√¢u h·ªèi
    analys_question_stream = analys_question(initial_query)
    full_analys_question=""
    with console.status("[bold green]Ph√¢n t√≠ch v·∫•n ƒë·ªÅ... [/bold green]", spinner="dots"):
        for part in analys_question_stream:
            if part is not None:
                full_analys_question += part
    console.print(Markdown(full_analys_question), soft_wrap=True, end="")
    history_analys.append(full_analys_question)
    ###

    ### ph√¢n t√≠ch t√¨m ki·∫øm t·∫°o c√¢u truy v·∫•n
    analys_prompt_stream = analys_prompt(history_analys)
    full_analys_prompt=""
    with console.status("[bold green]T√¨m ki·∫øm... [/bold green]", spinner="dots"):
        for part in analys_prompt_stream:
            if part is not None:
                full_analys_prompt += part
    final_analys_prompt = full_analys_prompt.strip('"')  # Lo·∫°i b·ªè d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
    current_queries.append(final_analys_prompt)
    ###

    while iteration < max_iterations and current_queries:
        current_query = current_queries.pop(0)
        
        console.print("\n")
        console.print(f"[cyan]üîç {current_query} [/cyan]")
        console.print("\n")

        search_results = search_web(current_query)
        console.print(f"[yellow]T√¨m th·∫•y {len(search_results)} k·∫øt qu·∫£.[/yellow]")

        if not search_results:
            all_answers.clear()
            console.print("\n")
            console.print(f"[red]Kh√≥ nha bro! Kh√¥ng t√¨m th·∫•y th√¥ng tin, ƒë·ªÉ t√¥i ph√¢n t√≠ch l·∫°i c√¢u h·ªèi...[/red]")
            console.print("\n")
            return deepsearch(initial_query)
        
        if any(result.get('title', '').startswith('EOF') for result in search_results):
            all_answers.clear()
            console.print("\n")
            console.print(f"[red]Kh√≥ nha bro! Kh√¥ng t√¨m th·∫•y th√¥ng tin, ƒë·ªÉ t√¥i ph√¢n t√≠ch l·∫°i c√¢u h·ªèi...[/red]")
            console.print("\n")
            return deepsearch(initial_query)


        new_query_found = False

        # Duy·ªát qua t·ª´ng k·∫øt qu·∫£ t√¨m ki·∫øm
        result_processed = False
        new_query_found = False
    
        for i, result in enumerate(search_results):
            url = result['url']
            
            # Ki·ªÉm tra xem URL ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch ch∆∞a
            if url in processed_urls:
                continue
            
            content = extract_content(url)
            if "Error" in content:
                continue
                   
            # Ph√¢n t√≠ch ch√≠nh b·∫±ng process_link
            analysis = process_link(initial_query, url, content)
            console.print("\n")
            final_analysis = ""
            with console.status(Markdown(f"T√¨m ki·∫øm trong [{result['title']}]({url})"), spinner="dots"):
                for part in analysis:
                    if part is not None:
                        final_analysis += part
            
            console.print(Markdown(final_analysis), soft_wrap=True, end="")
            
            # ƒê√°nh gi√° th√¥ng tin b·∫±ng process_link
            sufficiency_prompt = (
                f"Url: {url}\n"
                f"N·ªôi dung ph√¢n t√≠ch: {final_analysis}\n"
                f"C√¢u h·ªèi ban ƒë·∫ßu: {initial_query}\n"
                f"Danh s√°ch URL ƒë√£ ph√¢n t√≠ch: {', '.join(processed_urls)}\n"
                f"N·∫øu URL n√†y tr√πng v·ªõi b·∫•t k·ª≥ URL n√†o trong danh s√°ch ƒë√£ ph√¢n t√≠ch, tr·∫£ l·ªùi 'NOT YET' v√† kh√¥ng ƒë√°nh gi√° th√™m.\n"
                f"N·∫øu kh√¥ng tr√πng, h√£y ƒë√°nh gi√° xem th√¥ng tin n√†y ƒë√£ ƒë·ªß ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi ch∆∞a. "
                f"Tr·∫£ l·ªùi 'OK' n·∫øu ƒë·ªß, 'NOT YET' n·∫øu ch∆∞a ƒë·ªß, k√®m theo l√Ω do ng·∫Øn g·ªçn."
            )
            
            sufficiency_analysis = process_link(initial_query, url, sufficiency_prompt)
            console.print("\n")
            sufficiency_result = ""
            for part in sufficiency_analysis:
                if part is not None:
                    sufficiency_result += part
            
            # Ki·ªÉm tra k·∫øt qu·∫£ ƒë√°nh gi√°
            if "OK" in sufficiency_result.upper():
                result_processed = True
                all_answers[initial_query] = final_analysis
                history_analys.append(final_analysis)
                all_data += f"{url}: {final_analysis}\n"
                processed_urls.add(url)  # Th√™m URL v√†o danh s√°ch ƒë√£ ph√¢n t√≠ch
            elif "NOT YET" not in sufficiency_result.upper():
                result_processed = False
                processed_urls.add(url)
            else:
                result_processed = False
                processed_urls.add(url)            
            # Tr√≠ch xu·∫•t new_query
            new_queries = extract_queries(analysis, history_queries)
            if new_queries:
                for query in new_queries:
                    if query not in history_queries:
                        current_queries.append(query)
                        history_queries.add(query)
                        console.print(f"Th√™m truy v·∫•n m·ªõi: {query}")
                        new_query_found = True
            
            accumulated_context += f"\nNgu·ªìn: {url}\n{content}\n"
            if result_processed or new_query_found:
                break
        

        # Thu th·∫≠p to√†n b·ªô ph·∫£n h·ªìi t·ª´ reason_with_ollama
        answer_stream = reason_with_ollama(initial_query, accumulated_context)
        full_answer = ""
        with console.status("[bold green]Suy lu·∫≠n... [/bold green]", spinner="dots"):
            for part in answer_stream:
                if part is not None:
                    full_answer += part
        all_answers[current_query] = full_answer
        history_analys.append(full_answer)
        console.print(Markdown(full_answer), soft_wrap=True, end="")

        new_queries_from_reasoning = extract_queries(full_answer)

        # Thu th·∫≠p to√†n b·ªô ph·∫£n h·ªìi t·ª´ evaluate_answer
        evaluation_stream = evaluate_answer(initial_query, full_answer, evaluate_answer)
        full_evaluation = ""
        with console.status("[bold green]ƒê√°nh gi√° n·ªôi dung... [/bold green]", spinner="dots"):
            for part in evaluation_stream:
                if part is not None:
                    full_evaluation += part
        
        if "ƒë√£ ƒë·ªß" in full_evaluation.lower():
            break
        elif "ch∆∞a ƒë·ªß" in full_evaluation.lower():
            new_queries_from_evaluation = extract_queries(full_evaluation)
            relevant_query = new_queries_from_evaluation[0] if new_queries_from_evaluation else (new_queries_from_reasoning[0] if new_queries_from_reasoning else None)
            if relevant_query and relevant_query not in current_queries and relevant_query not in all_answers:
                current_queries.append(relevant_query)
            iteration += 1
        else:
            new_queries_from_evaluation = extract_queries(full_evaluation)
            relevant_query = new_queries_from_evaluation[0] if new_queries_from_evaluation else (new_queries_from_reasoning[0] if new_queries_from_reasoning else None)
            if relevant_query and relevant_query not in current_queries and relevant_query not in all_answers:
                current_queries.append(relevant_query)
            else:
                current_queries.append(current_query)
            iteration += 1
 
    if iteration >= max_iterations:
        console.print("\n[bold green]K·∫øt th√∫c DeepSearch! üåü\n[/bold green]")
    else:
        console.print("\n[bold green]K·∫øt th√∫c DeepSearch! üåü\n[/bold green]")


    summary_stream = summarize_answers(initial_query, history_analys)
    final_answer = ""
    with console.status("[bold green]T·ªïng h·ª£p... [/bold green]", spinner="dots"):
        for part in summary_stream:
            if part is not None:
                final_answer += part
    history_analys.clear()
    history_queries.clear()
    history_keywords.clear()
    all_answers.clear()
    console.clear()
    return f"\n{final_answer}"

                                                           
                                                                                                  
                                                                                                                       
                                                            
                     

# #H√†m test
# if __name__ == "__main__":
#     query = "C·∫≠p nh·∫≠t gi√∫p t√¥i nh·ªØng t·ª´ ng·ªØ hot trend c·ªßa gi·ªõi tr·∫ª genz Vi·ªát Nam ƒë·∫ßu nƒÉm 2025"
#     console.print(deepsearch(query))